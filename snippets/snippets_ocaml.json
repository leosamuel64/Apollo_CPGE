{
	"Function": {
		"prefix": ["spec", "new"],
		"body": ["$BLOCK_COMMENT_START CONTRAT", "${3:Description}", "* Type  : $4", "* Param : $5", 
			"* Pre   : $6", "* Result: $7 $BLOCK_COMMENT_END","let ${1:fonction} ${2:args} = ${0:\"TODO\"}","",
			"$BLOCK_COMMENT_START TESTS $BLOCK_COMMENT_END","","let%test _ = ${1} ${2} = \"TODO\" ",
			"let%test _ = ${1} ${2} = \"TODO\" ","let%test _ = ${1} ${2} = \"TODO\" "],
		"description": "Init a new function with its contracts and unit tests"
	},

	"Contract": {
		"prefix": ["cc", "contrat"],
		"body": ["$BLOCK_COMMENT_START CONTRAT", "${2:Description}", "* Type  : $3", "* Param : $4", 
			"* Pre   : $5", "* Result: $0 $BLOCK_COMMENT_END"],
		"description": "Create a comment block that contains differents fields for a function's contract"
	},

	"Test Block": {
		"prefix": ["btest", "tests"],
		"body": ["$BLOCK_COMMENT_START TESTS $BLOCK_COMMENT_END","",
			"let%test _ = ${1:function} ${2:args} = ${3:\"TODO\"} ",
			"let%test _ = ${1} ${2} = ${4:\"TODO\"} ",
			"let%test _ = ${1} ${2} = ${0:\"TODO\"} "],
		"description": "Create a three unit tests for a fonction"
	},

	"Auxiliary": {
		"prefix": ["af", "aux"],
		"body": ["let rec ${1:aux} ${2:args} =", "\t${0:\"TODO\"}", "in","${1} ${2}"],
		"description": "Init an auxiliary function with an accumulator"
	},

	"Anonymous": {
		"prefix": ["fun", "(fun)"],
		"body": ["(fun ${1:args} -> ${0:something})"],
		"description": "Init an anonymous function"
	},

	"Test": {
		"prefix": ["test", "let%test"],
		"body": ["let%test _ = ${1:args} = ${0:\"TODO\"} "],
		"description": "Create an unit test"
    },
    


	"Condition": {
		"prefix": ["if"],
		"body": ["if ${1:condition}", "then ${2:something}", "else ${0:something_else}"],
		"description": "Init a condition operator: if"
	},

	"for": {
		"prefix": ["for"],
		"body": ["for i=${1:<début>} to ${2:<fin>} do","  ${3:<code>}", "done;"],
		"description": "Init a for Loop structure"
	},

	"forArray": {
		"prefix": ["forArray","fa"],
		"body": ["for i=0 to (Array.length ${2:<Array>}-1) do","  ${3:<code>}", "done;"],
		"description": "Init a for Loop structure for Array"
	},

	"while": {
		"prefix": ["while"],
		"body": ["while ${1:<condition>} do","  ${2:<code>}", "done;"],
		"description": "Init a while Loop structure"
	},

	"stackcreate": {
		"prefix": ["Stack.create","sc"],
		"body": ["Stack.create ()"],
		"description": "Create a new empty Stack"
	},

	"queuecreate": {
		"prefix": ["Queue.create"],
		"body": ["Queue.create ()"],
		"description": "Create a new empty Queue"
	},



	"stackpush": {
		"prefix": ["Stack.push","spu"],
		"body": ["Stack.push ${1:<élément>}  ${2:<pile>} "],
		"description": "Push an element into a Stack"
	},

	"queueadd": {
		"prefix": ["Queue.add"],
		"body": ["Queue.add ${1:<élément>}  ${2:<file>} "],
		"description": "Add an element into a Queue"
	},

	"queuetake": {
		"prefix": ["Queue.take"],
		"body": ["Queue.take ${1:<file>}"],
		"description": "Take an element from a Queue"
	},


	"stackpop": {
		"prefix": ["Stack.pop","spo"],
		"body": ["Stack.pop ${1:<pile>}"],
		"description": "Pop an element from a Stack"
	},

	"stackisempty": {
		"prefix": ["Stack.is_empty","sie"],
		"body": ["Stack.is_empty ${1:<pile>}"],
		"description": "return True when the Stack is empty"
	},

	"queueisempty": {
		"prefix": ["Queue.is_empty"],
		"body": ["Queue.is_empty ${1:<file>}"],
		"description": "return True when the Queue is empty"
	},

	"hashcreate": {
		"prefix": ["Hashtbl.create"],
		"body": ["Hashtbl.create ${1:<longueur>}"],
		"description": "Créer une table de hashage d'une certaine longueur"
	},

	"hashadd": {
		"prefix": ["Hashtbl.add"],
		"body": ["Hashtbl.add ${1:<dict>} ${2:<key>} ${3:<value>}"],
		"description": "Ajoute un élément dans le dico"
	},

	"hashfind": {
		"prefix": ["Hashtbl.find"],
		"body": ["Hashtbl.find ${1:<dict>} ${2:<key>}"],
		"description": "Retourne la valeur associé à la clef"
	},

	"hashmem": {
		"prefix": ["Hashtbl.mem"],
		"body": ["Hashtbl.mem ${1:<dict>} ${2:<key>}"],
		"description": "Teste si une clef est présente dans un dico"
	},

	"hashremove": {
		"prefix": ["Hashtbl.remove"],
		"body": ["Hashtbl.remove ${1:<dict>} ${2:<key>}"],
		"description": "Enlève une clef du dico"
	},

	"arraymake": {
		"prefix": ["Array.make"],
		"body": ["Array.make ${1:<len>} ${2:<value>}"],
		"description": "Créer un tableau (mutable) de longueur len remplie de value "
	},

	"arraylen": {
		"prefix": ["Array.length"],
		"body": ["Array.length ${1:<tableau>}"],
		"description": "Renvoie la longueur du tableau  "
	},

	"arrayconcat": {
		"prefix": ["Array.concat"],
		"body": ["Array.concat [${1:<t1>};${2:<t2>}]"],
		"description": "Concat les tableaux d'une liste de tableaux"
	},

	"arraycp": {
		"prefix": ["Array.copy"],
		"body": ["Array.copy ${1:<tableau>}"],
		"description": "Fait une vrai copie du tableau"
	},

	"arraymap": {
		"prefix": ["Array.map"],
		"body": ["Array.map (${1:<fun>}) ${2:<t>}"],
		"description": "applique une fonction à un tableau"
	},

	"arrayiter": {
		"prefix": ["Array.iter"],
		"body": ["Array.iter (${1:<fun>}) ${2:<t>}"],
		"description": "applique une procédure à un tableau"
	},

	"listhd": {
		"prefix": ["List.hd"],
		"body": ["List.hd ${1:<l>}"],
		"description": "Renvoie la tête de la liste"
	},

	"listtl": {
		"prefix": ["List.tl"],
		"body": ["List.tl ${1:<l>}"],
		"description": "Renvoie la queue de la liste"
	},

	"listlength": {
		"prefix": ["List.length"],
		"body": ["List.length ${1:<l>}"],
		"description": "Renvoie la longueur de la liste"
	},

	"randint": {
		"prefix": ["Random.int"],
		"body": ["Random.int ${1:<n>}"],
		"description": "Renvoie un entier aléatoire de ⟦0,n⟧"
	},

	"randfloat": {
		"prefix": ["Random.float"],
		"body": ["Random.float ${1:<n>}"],
		"description": "Renvoie un flottant aléatoire de [0,n] "
	},


	"Compare": {
		"prefix": ["match"],
		"body": ["match ${1:something} with", "| ${2}\t-> ${0}", "| ${3}\t-> "],
		"description": "Init a condition operator: match with"
	},

	"Compare a List": {
		"prefix": ["ml", "match_list"],
		"body": ["match ${1:liste} with", "| []\t-> ${2}", "| t::q\t-> ${0}"],
		"description": "Init a condition operator: match with for a list"
	},

	"Compare an Option": {
		"prefix": ["mo","match_option"],
		"body": ["match ${1:option} with", "| None\t\t-> ${2}", "| Some x\t-> ${0}"],
		"description": "Init a condition operator: match with for an option type"
	},
	
	"stringmake": {
		"prefix": ["String.make"],
		"body": ["String.make ${1:<len>} ${2:<value>}"],
		"description": "Créer une chaine de charactere de longueur len remplie de value "
	},

	"stringlen": {
		"prefix": ["String.length"],
		"body": ["String.length ${0:<tableau>}"],
		"description": "Créer un tableau (mutable) de longueur len remplie de value "
	},
    
	"Binary Tree": {
		"prefix": ["treeInit","arbre_bin"],
		"body": ["type 'a arbreBinaire = Vide | Noeud of ('a arbreBinaire * 'a * 'a arbreBinaire) ;;", "let feuille x = Noeud(Vide, x, Vide);;","let exemple = Noeud (Noeud(Vide, 2, feuille 1),5,Noeud(Vide,3,Noeud(Noeud(Vide, 0, Vide),2,Vide)));;"],
		"description": "Init a binary tree type with exemple"
	},

	"Binary Tree match": {
		"prefix": ["matchTreeBin"],
		"body": ["let rec affiche_arbre_suff=function","| Vide -> ${1:<code>} ","| Noeud(fg,e,fd) -> ${2:<code>}",";;"],
		"description": "Init a binary tree type with exemple"
	},
	
	"Non Binary Tree": {
		"prefix": ["tree-n","arbre_naire"],
		"body": ["type 'a arbre_naire = ", "| Node of 'a * 'a arbre_naire list","",
		"let test_tree = Node(0, [(Node(5,[]));(Node(13,[]));(Node(42,[]))])","","",
		"$BLOCK_COMMENT_START CONTRAT","Permet de recuperer la racine d'un arbre n-aire",
		"* Type  : racine: 'a arbre_naire -> 'a ",
		"* Param : abr, un arbre n-aire",
		"* Pre   : abr non Vide",
		"* Result: l'element en racine de l'arbre abr $BLOCK_COMMENT_END",
		"let racine (Node(racine,_)) = racine","","$BLOCK_COMMENT_START TESTS $BLOCK_COMMENT_END","",
		"let%test _ = racine (Node(1, [])) = 1",
		"let%test _ = racine (Node('z', [])) = 'z'",
		"let%test _ = racine (Node(\"test\", [])) = \"test\"","","","$BLOCK_COMMENT_START CONTRAT",
		"Permet de recuperer les fils d'un arbre n-aire",
		"* Type  : fils: 'a arbre_naire -> 'a arbre_naire list",
		"* Param : abr, un abre n-aire ",
		"* Pre   : abr non Vide",
		"* Result: la liste contenant les fils de m'arbre abr $BLOCK_COMMENT_END",
		"let fils (Node(_,fils)) = fils","","$BLOCK_COMMENT_START TEST $BLOCK_COMMENT_END","",
		"let%test _ = fils (Node(1, [])) = []",
		"let%test _ = fils arbre_test = [(Node(5,[]));(Node(13,[]));(Node(42,[]))]"],
		"description": "Init a non binary tree type and getters"
	},
    
	"Fold Left": {
		"prefix": ["left","fold_left"],
		"body": ["List.fold_left (fun acc t -> ${0:(t::acc)}) [] ${1:liste}"],
		"description": "Init a list iterator: fold left"
	},

	"Fold Right": {
		"prefix": ["right","fold_right"],
		"body": ["List.fold_right (fun t qt -> ${0:(t::qt)}) ${1:liste} []"],
		"description": "Init a list iterator: fold right"
	},

	"Map": {
		"prefix": ["map","List.map"],
		"body": ["List.map (fun elt -> ${0:elt modified}) ${1:liste}"],
		"description": "appliquer une fonction à chaque élément"
	},

	"Iteration": {
		"prefix": ["iter","List.iter"],
		"body": ["List.iter (fun elt -> ${0:elt modified}) ${1:liste}"],
		"description": "appliquer une procédure à chaque élément"
	},

	"listmem": {
		"prefix": ["List.mem"],
		"body": ["List.mem ${0:element} ${1:liste}"],
		"description": "Teste si l'élément est présent dans la liste"
	},

	"listfilter": {
		"prefix": ["List.filter"],
		"body": ["List.filter ${0:predicat} ${1:liste}"],
		"description": "Garde dans la liste les éléments compatible avec le prédicat"
	},

	"listexemple": {
		"prefix": ["Listexemple"],
		"body": ["let ${0:nom} = [1;2;3;4;5;6;7;8;9];;"],
		"description": "Ajoute une liste d'exemple"
	},

	"alpha": {
		"prefix": ["alpha"],
		"body": ["α"],
		"description": "α"
	},

	"beta": {
		"prefix": ["beta"],
		"body": ["β"],
		"description": "β"
	},

	"gamma": {
		"prefix": ["gamma"],
		"body": ["γ"],
		"description": "γ"
	},

	"Gamma": {
		"prefix": ["Gamma"],
		"body": ["Γ"],
		"description": "Γ"
	},

	"delta": {
		"prefix": ["delta"],
		"body": ["δ"],
		"description": "δ"
	},

	"Delta": {
		"prefix": ["Delta"],
		"body": ["Δ"],
		"description": "Δ"
	},

	"epsilon": {
		"prefix": ["epsilon"],
		"body": ["ε"],
		"description": "ε"
	},

	
	"zeta": {
		"prefix": ["zeta"],
		"body": ["ζ"],
		"description": "ζ"
	},

	"eta": {
		"prefix": ["eta"],
		"body": ["η"],
		"description": "η"
	},

	"theta": {
		"prefix": ["theta"],
		"body": ["θ"],
		"description": "θ"
	},

	"Theta": {
		"prefix": ["Theta"],
		"body": ["Θ"],
		"description": "Θ"
	},

	"iota": {
		"prefix": ["iota"],
		"body": ["ι"],
		"description": "ι"
	},

	"kappa": {
		"prefix": ["kappa"],
		"body": ["κ"],
		"description": "κ"
	},

	"lambda": {
		"prefix": ["lambda"],
		"body": ["λ"],
		"description": "λ"
	},

	"Lambda": {
		"prefix": ["Lambda"],
		"body": ["Λ"],
		"description": "Λ"
	},

	"ksi": {
		"prefix": ["ksi"],
		"body": ["ξ"],
		"description": "ξ"
	},
	
	"Ksi": {
		"prefix": ["Ksi"],
		"body": ["Ξ"],
		"description": "Ξ"
	},

	"pi": {
		"prefix": ["pi"],
		"body": ["π"],
		"description": "π"
	},

	"Pi": {
		"prefix": ["Pi"],
		"body": ["Π"],
		"description": "Π"
	},

	"rho": {
		"prefix": ["rho"],
		"body": ["ρ"],
		"description": "ρ"
	},
	
	"sigma": {
		"prefix": ["sigma"],
		"body": ["σ"],
		"description": "σ"
	},

	"Sigma": {
		"prefix": ["Sigma"],
		"body": ["Σ"],
		"description": "Σ"
	},

	"tau": {
		"prefix": ["tau"],
		"body": ["τ"],
		"description": "τ"
	},

	"upsilon": {
		"prefix": ["upsilon"],
		"body": ["υ"],
		"description": "υ"
	},

	"phi": {
		"prefix": ["phi"],
		"body": ["ϕ"],
		"description": "ϕ"
	},

	"Phi": {
		"prefix": ["Phi"],
		"body": ["Φ"],
		"description": "Φ"
	},

	"chi": {
		"prefix": ["chi"],
		"body": ["χ"],
		"description": "χ"
	},

	"psi": {
		"prefix": ["psi"],
		"body": ["ψ"],
		"description": "ψ"
	},

	"Psi": {
		"prefix": ["Psi"],
		"body": ["Ψ"],
		"description": "Ψ"
	},

	"omega": {
		"prefix": ["omega"],
		"body": ["ω"],
		"description": "ω"
	},

	"Omega": {
		"prefix": ["Omega"],
		"body": ["Ω"],
		"description": "Ω"
	},

	"leq": {
		"prefix": ["leq"],
		"body": ["≤"],
		"description": "≤"
	},
	"geq": {
		"prefix": ["geq"],
		"body": ["≥"],
		"description": "≥"
	},

	"approx": {
		"prefix": ["approx"],
		"body": ["≈"],
		"description": "≈"
	},

	"sqrt": {
		"prefix": ["sqrt"],
		"body": ["√"],
		"description": "√"
	},

	"infinity": {
		"prefix": ["infinity","inf"],
		"body": ["∞"],
		"description": "∞"
	},

	"EmptySet": {
		"prefix": ["EmptySet","EnsembleVide"],
		"body": ["∅"],
		"description": "∅"
	},

	"in": {
		"prefix": ["in"],
		"body": ["∈"],
		"description": "∈"
	},

	"r]]": {
		"prefix": ["rb"],
		"body": ["⟧"],
		"description": "⟧"
	},

	"l[[": {
		"prefix": ["lb"],
		"body": ["⟦"],
		"description": "⟦"
	},

	"not=": {
		"prefix": ["notequal","nequal"],
		"body": ["≠"],
		"description": "≠"
	},

	"R": {
		"prefix": ["RR"],
		"body": ["ℝ"],
		"description": "ℝ"
	},

	"Z": {
		"prefix": ["ZZ"],
		"body": ["ℤ"],
		"description": "ℤ"
	},

	"N": {
		"prefix": ["NN"],
		"body": ["ℕ"],
		"description": "ℕ"
	},

	"C": {
		"prefix": ["CC"],
		"body": ["ℂ"],
		"description": "ℂ"
	},

	"inter": {
		"prefix": ["inter"],
		"body": ["∩"],
		"description": "∩"
	},
	
	"forall": {
		"prefix": ["forall"],
		"body": ["∀"],
		"description": "∀"
	},

	"exists": {
		"prefix": ["exists"],
		"body": ["∃"],
		"description": "∃"
	},

	
	"I don't know": {
		"prefix": ["idk","ocaml"],
		"body": ["¯\\_(ツ)_/¯"],
		"description": "When you end up unable to understand your own code"
	}
}